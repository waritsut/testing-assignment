// Code generated by MockGen. DO NOT EDIT.
// Source: cashier-service/internal/services/cashier_service (interfaces: Service)

// Package mock_cashier_service is a generated GoMock package.
package mock_cashier_service

import (
	structs "cashier-service/internal/structs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CalTheChangeMoney mocks base method.
func (m *MockService) CalTheChangeMoney(arg0, arg1 float64, arg2 structs.CashStruct) (structs.CashStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalTheChangeMoney", arg0, arg1, arg2)
	ret0, _ := ret[0].(structs.CashStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalTheChangeMoney indicates an expected call of CalTheChangeMoney.
func (mr *MockServiceMockRecorder) CalTheChangeMoney(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalTheChangeMoney", reflect.TypeOf((*MockService)(nil).CalTheChangeMoney), arg0, arg1, arg2)
}

// GetBalance mocks base method.
func (m *MockService) GetBalance() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockService)(nil).GetBalance))
}

// GetNoteCoinAmount mocks base method.
func (m *MockService) GetNoteCoinAmount() (structs.CashStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteCoinAmount")
	ret0, _ := ret[0].(structs.CashStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteCoinAmount indicates an expected call of GetNoteCoinAmount.
func (mr *MockServiceMockRecorder) GetNoteCoinAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteCoinAmount", reflect.TypeOf((*MockService)(nil).GetNoteCoinAmount))
}

// KeepTheReceivedCash mocks base method.
func (m *MockService) KeepTheReceivedCash(arg0 structs.CashStruct) (structs.CashStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeepTheReceivedCash", arg0)
	ret0, _ := ret[0].(structs.CashStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepTheReceivedCash indicates an expected call of KeepTheReceivedCash.
func (mr *MockServiceMockRecorder) KeepTheReceivedCash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepTheReceivedCash", reflect.TypeOf((*MockService)(nil).KeepTheReceivedCash), arg0)
}

// ResetTheCashier mocks base method.
func (m *MockService) ResetTheCashier() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetTheCashier")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetTheCashier indicates an expected call of ResetTheCashier.
func (mr *MockServiceMockRecorder) ResetTheCashier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetTheCashier", reflect.TypeOf((*MockService)(nil).ResetTheCashier))
}

// TakeTheChange mocks base method.
func (m *MockService) TakeTheChange(arg0 structs.CashStruct) (structs.CashStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeTheChange", arg0)
	ret0, _ := ret[0].(structs.CashStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeTheChange indicates an expected call of TakeTheChange.
func (mr *MockServiceMockRecorder) TakeTheChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeTheChange", reflect.TypeOf((*MockService)(nil).TakeTheChange), arg0)
}
